
aviao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000074  080035e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080035e0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007292  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000151a  00000000  00000000  0002732f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00028850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015eeb  00000000  00000000  00029538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e3e  00000000  00000000  0003f423  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081ed3  00000000  00000000  00045261  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fcc  00000000  00000000  000c71b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003520 	.word	0x08003520

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003520 	.word	0x08003520

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <ST7789_WriteCommand+0x40>)
 80010c0:	f001 f9ea 	bl	8002498 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <ST7789_WriteCommand+0x44>)
 80010ca:	f001 f9e5 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010ce:	1df9      	adds	r1, r7, #7
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	2201      	movs	r2, #1
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <ST7789_WriteCommand+0x48>)
 80010d8:	f001 fe64 	bl	8002da4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80010dc:	2201      	movs	r2, #1
 80010de:	2110      	movs	r1, #16
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <ST7789_WriteCommand+0x40>)
 80010e2:	f001 f9d9 	bl	8002498 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	2000009c 	.word	0x2000009c

080010fc <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001106:	2200      	movs	r2, #0
 8001108:	2110      	movs	r1, #16
 800110a:	4815      	ldr	r0, [pc, #84]	; (8001160 <ST7789_WriteData+0x64>)
 800110c:	f001 f9c4 	bl	8002498 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <ST7789_WriteData+0x68>)
 8001116:	f001 f9bf 	bl	8002498 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800111a:	e015      	b.n	8001148 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	4293      	cmp	r3, r2
 8001124:	bf28      	it	cs
 8001126:	4613      	movcs	r3, r2
 8001128:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <ST7789_WriteData+0x6c>)
 8001134:	f001 fe36 	bl	8002da4 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1e6      	bne.n	800111c <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <ST7789_WriteData+0x64>)
 8001154:	f001 f9a0 	bl	8002498 <HAL_GPIO_WritePin>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00
 8001168:	2000009c 	.word	0x2000009c

0800116c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	4603      	mov	r3, r0
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	807b      	strh	r3, [r7, #2]
 8001186:	4613      	mov	r3, r2
 8001188:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800118a:	2200      	movs	r2, #0
 800118c:	2110      	movs	r1, #16
 800118e:	4824      	ldr	r0, [pc, #144]	; (8001220 <ST7789_SetAddressWindow+0xb4>)
 8001190:	f001 f982 	bl	8002498 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	82fb      	strh	r3, [r7, #22]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	827b      	strh	r3, [r7, #18]
 80011a0:	883b      	ldrh	r3, [r7, #0]
 80011a2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80011a4:	202a      	movs	r0, #42	; 0x2a
 80011a6:	f7ff ff83 	bl	80010b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80011aa:	8afb      	ldrh	r3, [r7, #22]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	733b      	strb	r3, [r7, #12]
 80011b4:	8afb      	ldrh	r3, [r7, #22]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	737b      	strb	r3, [r7, #13]
 80011ba:	8abb      	ldrh	r3, [r7, #20]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	8abb      	ldrh	r3, [r7, #20]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff93 	bl	80010fc <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80011d6:	202b      	movs	r0, #43	; 0x2b
 80011d8:	f7ff ff6a 	bl	80010b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80011dc:	8a7b      	ldrh	r3, [r7, #18]
 80011de:	0a1b      	lsrs	r3, r3, #8
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	723b      	strb	r3, [r7, #8]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	727b      	strb	r3, [r7, #9]
 80011ec:	8a3b      	ldrh	r3, [r7, #16]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	72bb      	strb	r3, [r7, #10]
 80011f6:	8a3b      	ldrh	r3, [r7, #16]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2104      	movs	r1, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff7a 	bl	80010fc <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001208:	202c      	movs	r0, #44	; 0x2c
 800120a:	f7ff ff51 	bl	80010b0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800120e:	2201      	movs	r2, #1
 8001210:	2110      	movs	r1, #16
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <ST7789_SetAddressWindow+0xb4>)
 8001214:	f001 f940 	bl	8002498 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	40010800 	.word	0x40010800

08001224 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	460b      	mov	r3, r1
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	2bef      	cmp	r3, #239	; 0xef
 800123a:	d821      	bhi.n	8001280 <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	2bef      	cmp	r3, #239	; 0xef
 8001240:	d81e      	bhi.n	8001280 <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	88f8      	ldrh	r0, [r7, #6]
 800124a:	f7ff ff8f 	bl	800116c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800125e:	2200      	movs	r2, #0
 8001260:	2110      	movs	r1, #16
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <ST7789_DrawPixel+0x64>)
 8001264:	f001 f918 	bl	8002498 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff44 	bl	80010fc <ST7789_WriteData>
	ST7789_UnSelect();
 8001274:	2201      	movs	r2, #1
 8001276:	2110      	movs	r1, #16
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ST7789_DrawPixel+0x64>)
 800127a:	f001 f90d 	bl	8002498 <HAL_GPIO_WritePin>
 800127e:	e000      	b.n	8001282 <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001280:	bf00      	nop
}
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010800 	.word	0x40010800

0800128c <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	80fb      	strh	r3, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	80bb      	strh	r3, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 80012aa:	883a      	ldrh	r2, [r7, #0]
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b8:	8879      	ldrh	r1, [r7, #2]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	1acb      	subs	r3, r1, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bfb8      	it	lt
 80012c2:	425b      	neglt	r3, r3
 80012c4:	429a      	cmp	r2, r3
 80012c6:	bfcc      	ite	gt
 80012c8:	2301      	movgt	r3, #1
 80012ca:	2300      	movle	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <ST7789_DrawLine+0x62>
		swap = x0;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80012da:	88bb      	ldrh	r3, [r7, #4]
 80012dc:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80012ea:	8a3b      	ldrh	r3, [r7, #16]
 80012ec:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d90b      	bls.n	800130e <ST7789_DrawLine+0x82>
		swap = x0;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80012fe:	8a3b      	ldrh	r3, [r7, #16]
 8001300:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 800130a:	8a3b      	ldrh	r3, [r7, #16]
 800130c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b29b      	uxth	r3, r3
 8001316:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001318:	883a      	ldrh	r2, [r7, #0]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8001326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132a:	0fda      	lsrs	r2, r3, #31
 800132c:	4413      	add	r3, r2
 800132e:	105b      	asrs	r3, r3, #1
 8001330:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d202      	bcs.n	8001340 <ST7789_DrawLine+0xb4>
        ystep = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	82bb      	strh	r3, [r7, #20]
 800133e:	e028      	b.n	8001392 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8001346:	e024      	b.n	8001392 <ST7789_DrawLine+0x106>
        if (steep) {
 8001348:	8a7b      	ldrh	r3, [r7, #18]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800134e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001350:	88f9      	ldrh	r1, [r7, #6]
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff65 	bl	8001224 <ST7789_DrawPixel>
 800135a:	e005      	b.n	8001368 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 800135c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800135e:	88b9      	ldrh	r1, [r7, #4]
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff5e 	bl	8001224 <ST7789_DrawPixel>
        }
        err -= dy;
 8001368:	8afa      	ldrh	r2, [r7, #22]
 800136a:	89bb      	ldrh	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29b      	uxth	r3, r3
 8001370:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8001372:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da08      	bge.n	800138c <ST7789_DrawLine+0x100>
            y0 += ystep;
 800137a:	8aba      	ldrh	r2, [r7, #20]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001382:	8afa      	ldrh	r2, [r7, #22]
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	3301      	adds	r3, #1
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	429a      	cmp	r2, r3
 8001398:	d9d6      	bls.n	8001348 <ST7789_DrawLine+0xbc>
        }
    }
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
	...

080013a4 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	4623      	mov	r3, r4
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	4603      	mov	r3, r0
 80013b8:	80bb      	strh	r3, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	807b      	strh	r3, [r7, #2]
 80013be:	4613      	mov	r3, r2
 80013c0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	4822      	ldr	r0, [pc, #136]	; (8001450 <ST7789_DrawFilledRectangle+0xac>)
 80013c8:	f001 f866 	bl	8002498 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2bef      	cmp	r3, #239	; 0xef
 80013d0:	d83a      	bhi.n	8001448 <ST7789_DrawFilledRectangle+0xa4>
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	2bef      	cmp	r3, #239	; 0xef
 80013d6:	d837      	bhi.n	8001448 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	4413      	add	r3, r2
 80013de:	2bef      	cmp	r3, #239	; 0xef
 80013e0:	dd03      	ble.n	80013ea <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80013e8:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80013ea:	88ba      	ldrh	r2, [r7, #4]
 80013ec:	883b      	ldrh	r3, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	2bef      	cmp	r3, #239	; 0xef
 80013f2:	dd03      	ble.n	80013fc <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80013fa:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e017      	b.n	8001432 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	b299      	uxth	r1, r3
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	4413      	add	r3, r2
 8001412:	b29c      	uxth	r4, r3
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	b29a      	uxth	r2, r3
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	88f8      	ldrh	r0, [r7, #6]
 8001420:	8c3b      	ldrh	r3, [r7, #32]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	4622      	mov	r2, r4
 8001428:	f7ff ff30 	bl	800128c <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	3301      	adds	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	b29b      	uxth	r3, r3
 8001436:	883a      	ldrh	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d2e2      	bcs.n	8001402 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <ST7789_DrawFilledRectangle+0xac>)
 8001442:	f001 f829 	bl	8002498 <HAL_GPIO_WritePin>
 8001446:	e000      	b.n	800144a <ST7789_DrawFilledRectangle+0xa6>
		return;
 8001448:	bf00      	nop
}
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	40010800 	.word	0x40010800

08001454 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08d      	sub	sp, #52	; 0x34
 8001458:	af02      	add	r7, sp, #8
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001472:	2200      	movs	r2, #0
 8001474:	2110      	movs	r1, #16
 8001476:	485d      	ldr	r0, [pc, #372]	; (80015ec <ST7789_DrawFilledTriangle+0x198>)
 8001478:	f001 f80e 	bl	8002498 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800147c:	2300      	movs	r3, #0
 800147e:	823b      	strh	r3, [r7, #16]
 8001480:	2300      	movs	r3, #0
 8001482:	81fb      	strh	r3, [r7, #14]
 8001484:	2300      	movs	r3, #0
 8001486:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001488:	2300      	movs	r3, #0
 800148a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800148c:	2300      	movs	r3, #0
 800148e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001490:	2300      	movs	r3, #0
 8001492:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001494:	2300      	movs	r3, #0
 8001496:	83fb      	strh	r3, [r7, #30]
 8001498:	2300      	movs	r3, #0
 800149a:	83bb      	strh	r3, [r7, #28]
 800149c:	2300      	movs	r3, #0
 800149e:	837b      	strh	r3, [r7, #26]
 80014a0:	2300      	movs	r3, #0
 80014a2:	833b      	strh	r3, [r7, #24]
 80014a4:	2300      	movs	r3, #0
 80014a6:	82fb      	strh	r3, [r7, #22]
 80014a8:	2300      	movs	r3, #0
 80014aa:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 80014b0:	887a      	ldrh	r2, [r7, #2]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bfb8      	it	lt
 80014ba:	425b      	neglt	r3, r3
 80014bc:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80014be:	883a      	ldrh	r2, [r7, #0]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bfb8      	it	lt
 80014c8:	425b      	neglt	r3, r3
 80014ca:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d304      	bcc.n	80014e6 <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	843b      	strh	r3, [r7, #32]
 80014e4:	e005      	b.n	80014f2 <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 80014e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ea:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80014ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f0:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80014f2:	883a      	ldrh	r2, [r7, #0]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d304      	bcc.n	8001504 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	83bb      	strh	r3, [r7, #28]
 8001502:	e005      	b.n	8001510 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800150a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800150e:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8001510:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001518:	429a      	cmp	r2, r3
 800151a:	db10      	blt.n	800153e <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001524:	8a3b      	ldrh	r3, [r7, #16]
 8001526:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001528:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800152c:	0fda      	lsrs	r2, r3, #31
 800152e:	4413      	add	r3, r2
 8001530:	105b      	asrs	r3, r3, #1
 8001532:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001538:	8a3b      	ldrh	r3, [r7, #16]
 800153a:	82bb      	strh	r3, [r7, #20]
 800153c:	e00f      	b.n	800155e <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800155e:	2300      	movs	r3, #0
 8001560:	827b      	strh	r3, [r7, #18]
 8001562:	e033      	b.n	80015cc <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8001564:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001566:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001568:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800156a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800156c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4623      	mov	r3, r4
 8001574:	f7ff fe8a 	bl	800128c <ST7789_DrawLine>

		num += numadd;
 8001578:	8b3a      	ldrh	r2, [r7, #24]
 800157a:	8afb      	ldrh	r3, [r7, #22]
 800157c:	4413      	add	r3, r2
 800157e:	b29b      	uxth	r3, r3
 8001580:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001582:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001586:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800158a:	429a      	cmp	r2, r3
 800158c:	db0e      	blt.n	80015ac <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 800158e:	8b3a      	ldrh	r2, [r7, #24]
 8001590:	8b7b      	ldrh	r3, [r7, #26]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001598:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800159a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800159c:	4413      	add	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80015a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015a4:	8bfb      	ldrh	r3, [r7, #30]
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80015ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015ae:	8c3b      	ldrh	r3, [r7, #32]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80015b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015b8:	8bbb      	ldrh	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80015c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	827b      	strh	r3, [r7, #18]
 80015cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80015d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	ddc5      	ble.n	8001564 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 80015d8:	2201      	movs	r2, #1
 80015da:	2110      	movs	r1, #16
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <ST7789_DrawFilledTriangle+0x198>)
 80015de:	f000 ff5b 	bl	8002498 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40010800 	.word	0x40010800

080015f0 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	4604      	mov	r4, r0
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4623      	mov	r3, r4
 8001600:	80fb      	strh	r3, [r7, #6]
 8001602:	4603      	mov	r3, r0
 8001604:	80bb      	strh	r3, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800160e:	2200      	movs	r2, #0
 8001610:	2110      	movs	r1, #16
 8001612:	4869      	ldr	r0, [pc, #420]	; (80017b8 <ST7789_DrawFilledCircle+0x1c8>)
 8001614:	f000 ff40 	bl	8002498 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	f1c3 0301 	rsb	r3, r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	461a      	mov	r2, r3
 800162a:	03d2      	lsls	r2, r2, #15
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 800163c:	88f8      	ldrh	r0, [r7, #6]
 800163e:	88ba      	ldrh	r2, [r7, #4]
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	4413      	add	r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	883a      	ldrh	r2, [r7, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fdeb 	bl	8001224 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800164e:	88f8      	ldrh	r0, [r7, #6]
 8001650:	88ba      	ldrh	r2, [r7, #4]
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	883a      	ldrh	r2, [r7, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fde2 	bl	8001224 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	4413      	add	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	88b9      	ldrh	r1, [r7, #4]
 800166a:	883a      	ldrh	r2, [r7, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdd9 	bl	8001224 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	88b9      	ldrh	r1, [r7, #4]
 800167c:	883a      	ldrh	r2, [r7, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fdd0 	bl	8001224 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b298      	uxth	r0, r3
 800168c:	88b9      	ldrh	r1, [r7, #4]
 800168e:	88fa      	ldrh	r2, [r7, #6]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4413      	add	r3, r2
 8001694:	b29a      	uxth	r2, r3
 8001696:	88bc      	ldrh	r4, [r7, #4]
 8001698:	883b      	ldrh	r3, [r7, #0]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4623      	mov	r3, r4
 800169e:	f7ff fdf5 	bl	800128c <ST7789_DrawLine>

	while (x < y) {
 80016a2:	e079      	b.n	8001798 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 80016a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0e      	blt.n	80016ca <ST7789_DrawFilledCircle+0xda>
			y--;
 80016ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80016b8:	8a7b      	ldrh	r3, [r7, #18]
 80016ba:	3302      	adds	r3, #2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80016c0:	8afa      	ldrh	r2, [r7, #22]
 80016c2:	8a7b      	ldrh	r3, [r7, #18]
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80016ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80016d6:	8abb      	ldrh	r3, [r7, #20]
 80016d8:	3302      	adds	r3, #2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80016de:	8afa      	ldrh	r2, [r7, #22]
 80016e0:	8abb      	ldrh	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	8a3b      	ldrh	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b298      	uxth	r0, r3
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	4413      	add	r3, r2
 80016f6:	b299      	uxth	r1, r3
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29c      	uxth	r4, r3
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	4413      	add	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	883b      	ldrh	r3, [r7, #0]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	4622      	mov	r2, r4
 8001710:	f7ff fdbc 	bl	800128c <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	8a3b      	ldrh	r3, [r7, #16]
 8001718:	4413      	add	r3, r2
 800171a:	b298      	uxth	r0, r3
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b299      	uxth	r1, r3
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	8a3b      	ldrh	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29c      	uxth	r4, r3
 800172c:	88ba      	ldrh	r2, [r7, #4]
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b29a      	uxth	r2, r3
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	4622      	mov	r2, r4
 800173c:	f7ff fda6 	bl	800128c <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4413      	add	r3, r2
 8001746:	b298      	uxth	r0, r3
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	8a3b      	ldrh	r3, [r7, #16]
 800174c:	4413      	add	r3, r2
 800174e:	b299      	uxth	r1, r3
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29c      	uxth	r4, r3
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	8a3b      	ldrh	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	883b      	ldrh	r3, [r7, #0]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	4622      	mov	r2, r4
 8001768:	f7ff fd90 	bl	800128c <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	4413      	add	r3, r2
 8001772:	b298      	uxth	r0, r3
 8001774:	88ba      	ldrh	r2, [r7, #4]
 8001776:	8a3b      	ldrh	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b299      	uxth	r1, r3
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b29c      	uxth	r4, r3
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	8a3b      	ldrh	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29a      	uxth	r2, r3
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	4622      	mov	r2, r4
 8001794:	f7ff fd7a 	bl	800128c <ST7789_DrawLine>
	while (x < y) {
 8001798:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800179c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f6ff af7f 	blt.w	80016a4 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 80017a6:	2201      	movs	r2, #1
 80017a8:	2110      	movs	r1, #16
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <ST7789_DrawFilledCircle+0x1c8>)
 80017ac:	f000 fe74 	bl	8002498 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40010800 	.word	0x40010800
 80017bc:	00000000 	.word	0x00000000

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b091      	sub	sp, #68	; 0x44
 80017c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f000 fbc7 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f945 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f000 f9bb 	bl	8001b48 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017d2:	f000 f983 	bl	8001adc <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float h = 1000, velAviao = 55, tempo; //Valores de teste, SI
 80017d6:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <main+0x288>)
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017da:	4b9c      	ldr	r3, [pc, #624]	; (8001a4c <main+0x28c>)
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
	  tempo = h*2/GRAVITY;
 80017de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e0:	4619      	mov	r1, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f976 	bl	8000ad4 <__addsf3>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe14 	bl	8000418 <__aeabi_f2d>
 80017f0:	a393      	add	r3, pc, #588	; (adr r3, 8001a40 <main+0x280>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe ff91 	bl	800071c <__aeabi_ddiv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	4618      	mov	r0, r3
 8001800:	4621      	mov	r1, r4
 8001802:	f7ff f911 	bl	8000a28 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
	  tempo = sqrt(tempo);
 800180a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800180c:	f7fe fe04 	bl	8000418 <__aeabi_f2d>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f001 fd80 	bl	800331c <sqrt>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	4618      	mov	r0, r3
 8001822:	4621      	mov	r1, r4
 8001824:	f7ff f900 	bl	8000a28 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
	  float deltaS = velAviao * tempo;
 800182c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800182e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001830:	f7ff fa58 	bl	8000ce4 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	623b      	str	r3, [r7, #32]
	  float posAlvo = rand()%(WIDTH/5) + 0.7 * WIDTH; // Posição em px
 8001838:	f001 fcc8 	bl	80031cc <rand>
 800183c:	4601      	mov	r1, r0
 800183e:	4b84      	ldr	r3, [pc, #528]	; (8001a50 <main+0x290>)
 8001840:	fb83 2301 	smull	r2, r3, r3, r1
 8001844:	10da      	asrs	r2, r3, #3
 8001846:	17cb      	asrs	r3, r1, #31
 8001848:	1ad2      	subs	r2, r2, r3
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1aca      	subs	r2, r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7fe fdcd 	bl	80003f4 <__aeabi_i2d>
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <main+0x294>)
 8001860:	f7fe fc7c 	bl	800015c <__adddf3>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	f7ff f8dc 	bl	8000a28 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	61fb      	str	r3, [r7, #28]
	  ST7789_DrawFilledRectangle((uint16_t)posAlvo, 0, 5, 2, RED); // Alvo
 8001874:	69f8      	ldr	r0, [r7, #28]
 8001876:	f7ff fbfb 	bl	8001070 <__aeabi_f2uiz>
 800187a:	4603      	mov	r3, r0
 800187c:	b298      	uxth	r0, r3
 800187e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2302      	movs	r3, #2
 8001886:	2205      	movs	r2, #5
 8001888:	2100      	movs	r1, #0
 800188a:	f7ff fd8b 	bl	80013a4 <ST7789_DrawFilledRectangle>
	  posAlvo = PxToMeters(posAlvo);
 800188e:	69f8      	ldr	r0, [r7, #28]
 8001890:	f000 fa06 	bl	8001ca0 <PxToMeters>
 8001894:	61f8      	str	r0, [r7, #28]
	  float posLancamento = posAlvo - deltaS;
 8001896:	6a39      	ldr	r1, [r7, #32]
 8001898:	69f8      	ldr	r0, [r7, #28]
 800189a:	f7ff f919 	bl	8000ad0 <__aeabi_fsub>
 800189e:	4603      	mov	r3, r0
 80018a0:	61bb      	str	r3, [r7, #24]

	  uint8_t simulando = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  uint16_t alturaAviao = MetersToPx(h);
 80018a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018aa:	f000 f9e5 	bl	8001c78 <MetersToPx>
 80018ae:	4603      	mov	r3, r0
 80018b0:	82fb      	strh	r3, [r7, #22]
	  uint16_t ultimaPosAviao = 0, ultimaPosCarga = posLancamento, ultimaAltCarga = alturaAviao;
 80018b2:	2300      	movs	r3, #0
 80018b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80018b6:	69b8      	ldr	r0, [r7, #24]
 80018b8:	f7ff fbda 	bl	8001070 <__aeabi_f2uiz>
 80018bc:	4603      	mov	r3, r0
 80018be:	867b      	strh	r3, [r7, #50]	; 0x32
 80018c0:	8afb      	ldrh	r3, [r7, #22]
 80018c2:	863b      	strh	r3, [r7, #48]	; 0x30
	  posLancamento = MetersToPx(posLancamento);
 80018c4:	69b8      	ldr	r0, [r7, #24]
 80018c6:	f000 f9d7 	bl	8001c78 <MetersToPx>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f9b1 	bl	8000c34 <__aeabi_ui2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
	  uint32_t inicioSimulacao = HAL_GetTick();
 80018d6:	f000 fb97 	bl	8002008 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]
	  while(simulando){
 80018dc:	e0aa      	b.n	8001a34 <main+0x274>
		  float t = (HAL_GetTick() - inicioSimulacao)/(float)1000;
 80018de:	f000 fb93 	bl	8002008 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9a3 	bl	8000c34 <__aeabi_ui2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4955      	ldr	r1, [pc, #340]	; (8001a48 <main+0x288>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff faaa 	bl	8000e4c <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
		  float posAviao = CalcHorPos(velAviao, t); posAviao = MetersToPx(posAviao);
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001900:	f000 f974 	bl	8001bec <CalcHorPos>
 8001904:	60b8      	str	r0, [r7, #8]
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 f9b6 	bl	8001c78 <MetersToPx>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f990 	bl	8000c34 <__aeabi_ui2f>
 8001914:	4603      	mov	r3, r0
 8001916:	60bb      	str	r3, [r7, #8]

		  if(ultimaPosAviao != posAviao){
 8001918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f98e 	bl	8000c3c <__aeabi_i2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4619      	mov	r1, r3
 8001924:	68b8      	ldr	r0, [r7, #8]
 8001926:	f7ff fb71 	bl	800100c <__aeabi_fcmpeq>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <main+0x186>
			  DrawPlane(ultimaPosAviao, alturaAviao, BLACK);
 8001930:	8af9      	ldrh	r1, [r7, #22]
 8001932:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001934:	2200      	movs	r2, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f9c2 	bl	8001cc0 <DrawPlane>
			  ultimaPosAviao = posAviao;
 800193c:	68b8      	ldr	r0, [r7, #8]
 800193e:	f7ff fb97 	bl	8001070 <__aeabi_f2uiz>
 8001942:	4603      	mov	r3, r0
 8001944:	86bb      	strh	r3, [r7, #52]	; 0x34
		  }

		  DrawPlane(posAviao, alturaAviao, WHITE);
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7ff fb92 	bl	8001070 <__aeabi_f2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	b29b      	uxth	r3, r3
 8001950:	8af9      	ldrh	r1, [r7, #22]
 8001952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f9b2 	bl	8001cc0 <DrawPlane>
		  if(posAviao >= posLancamento){
 800195c:	69b9      	ldr	r1, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f7ff fb72 	bl	8001048 <__aeabi_fcmpge>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <main+0x1ac>
 800196a:	e063      	b.n	8001a34 <main+0x274>
			  float posCarga = CalcHorPos(velAviao, t); posCarga = MetersToPx(posCarga);
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001970:	f000 f93c 	bl	8001bec <CalcHorPos>
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f97e 	bl	8001c78 <MetersToPx>
 800197c:	4603      	mov	r3, r0
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f958 	bl	8000c34 <__aeabi_ui2f>
 8001984:	4603      	mov	r3, r0
 8001986:	607b      	str	r3, [r7, #4]
			  float altCarga = CalcVerPos(h, t); altCarga = MetersToPx(altCarga);
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f000 f93c 	bl	8001c08 <CalcVerPos>
 8001990:	6038      	str	r0, [r7, #0]
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f000 f970 	bl	8001c78 <MetersToPx>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f94a 	bl	8000c34 <__aeabi_ui2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	603b      	str	r3, [r7, #0]
			  if(ultimaPosCarga != posCarga || ultimaAltCarga != altCarga){
 80019a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f948 	bl	8000c3c <__aeabi_i2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fb2b 	bl	800100c <__aeabi_fcmpeq>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <main+0x214>
 80019bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f93c 	bl	8000c3c <__aeabi_i2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff fb1f 	bl	800100c <__aeabi_fcmpeq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <main+0x238>
				  ST7789_DrawFilledCircle(ultimaPosCarga, ultimaAltCarga, 2, BLACK);
 80019d4:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	; 0x32
 80019d8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 80019dc:	2300      	movs	r3, #0
 80019de:	2202      	movs	r2, #2
 80019e0:	f7ff fe06 	bl	80015f0 <ST7789_DrawFilledCircle>
				  ultimaPosCarga = posCarga; ultimaAltCarga = altCarga;
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fb43 	bl	8001070 <__aeabi_f2uiz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80019ee:	6838      	ldr	r0, [r7, #0]
 80019f0:	f7ff fb3e 	bl	8001070 <__aeabi_f2uiz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	863b      	strh	r3, [r7, #48]	; 0x30
			  }
			  ST7789_DrawFilledCircle((uint16_t)posCarga, (uint16_t)altCarga, 2, WHITE);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fb39 	bl	8001070 <__aeabi_f2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b21c      	sxth	r4, r3
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff fb33 	bl	8001070 <__aeabi_f2uiz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b219      	sxth	r1, r3
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	2202      	movs	r2, #2
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff fdea 	bl	80015f0 <ST7789_DrawFilledCircle>
			  if(altCarga <= 4) simulando = 0;
 8001a1c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7ff fb07 	bl	8001034 <__aeabi_fcmple>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d100      	bne.n	8001a2e <main+0x26e>
 8001a2c:	e002      	b.n	8001a34 <main+0x274>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  while(simulando){
 8001a34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f af50 	bne.w	80018de <main+0x11e>
  {
 8001a3e:	e6ca      	b.n	80017d6 <main+0x16>
 8001a40:	51eb851f 	.word	0x51eb851f
 8001a44:	40239eb8 	.word	0x40239eb8
 8001a48:	447a0000 	.word	0x447a0000
 8001a4c:	425c0000 	.word	0x425c0000
 8001a50:	2aaaaaab 	.word	0x2aaaaaab
 8001a54:	40650000 	.word	0x40650000

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b090      	sub	sp, #64	; 0x40
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	2228      	movs	r2, #40	; 0x28
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fba8 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a82:	2310      	movs	r3, #16
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a86:	2302      	movs	r3, #2
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a8e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fd15 	bl	80024c8 <HAL_RCC_OscConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001aa4:	f000 f94e 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aac:	2302      	movs	r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 ff80 	bl	80029c8 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001ace:	f000 f939 	bl	8001d44 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3740      	adds	r7, #64	; 0x40
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <MX_SPI1_Init+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b10:	2208      	movs	r2, #8
 8001b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b28:	220a      	movs	r2, #10
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_SPI1_Init+0x64>)
 8001b2e:	f001 f8b5 	bl	8002c9c <HAL_SPI_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b38:	f000 f904 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000009c 	.word	0x2000009c
 8001b44:	40013000 	.word	0x40013000

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_GPIO_Init+0x98>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_GPIO_Init+0x9c>)
 8001b92:	f000 fc81 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4813      	ldr	r0, [pc, #76]	; (8001be8 <MX_GPIO_Init+0xa0>)
 8001b9c:	f000 fc7c 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2302      	movs	r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_GPIO_Init+0x9c>)
 8001bb8:	f000 fb14 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_GPIO_Init+0xa0>)
 8001bd4:	f000 fb06 	bl	80021e4 <HAL_GPIO_Init>

}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010800 	.word	0x40010800
 8001be8:	40010c00 	.word	0x40010c00

08001bec <CalcHorPos>:

/* USER CODE BEGIN 4 */
float CalcHorPos(float speed, float time){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	return time*speed;
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	6838      	ldr	r0, [r7, #0]
 8001bfa:	f7ff f873 	bl	8000ce4 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <CalcVerPos>:
float CalcVerPos(float initialPos, float time){
 8001c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
	return initialPos - GRAVITY/2*time*time;
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7fe fbff 	bl	8000418 <__aeabi_f2d>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f7fe fbfa 	bl	8000418 <__aeabi_f2d>
 8001c24:	a312      	add	r3, pc, #72	; (adr r3, 8001c70 <CalcVerPos+0x68>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fc4d 	bl	80004c8 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4690      	mov	r8, r2
 8001c34:	4699      	mov	r9, r3
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7fe fbee 	bl	8000418 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fc40 	bl	80004c8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fa82 	bl	8000158 <__aeabi_dsub>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f7fe fee4 	bl	8000a28 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	51eb851f 	.word	0x51eb851f
 8001c74:	40139eb8 	.word	0x40139eb8

08001c78 <MetersToPx>:
uint16_t MetersToPx(float pos){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	return pos * ((float)15 / 70);
 8001c80:	4906      	ldr	r1, [pc, #24]	; (8001c9c <MetersToPx+0x24>)
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff f82e 	bl	8000ce4 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f9f0 	bl	8001070 <__aeabi_f2uiz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b29b      	uxth	r3, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	3e5b6db7 	.word	0x3e5b6db7

08001ca0 <PxToMeters>:
float PxToMeters(float px){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	return px*((float)70/15);
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <PxToMeters+0x1c>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f81a 	bl	8000ce4 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40955555 	.word	0x40955555

08001cc0 <DrawPlane>:
void DrawPlane(uint16_t x, uint16_t y, uint16_t color){
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	80bb      	strh	r3, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	807b      	strh	r3, [r7, #2]
	ST7789_DrawFilledRectangle(x, y, 13, 3, color);
 8001cd2:	88b9      	ldrh	r1, [r7, #4]
 8001cd4:	88f8      	ldrh	r0, [r7, #6]
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2303      	movs	r3, #3
 8001cdc:	220d      	movs	r2, #13
 8001cde:	f7ff fb61 	bl	80013a4 <ST7789_DrawFilledRectangle>
	ST7789_DrawFilledTriangle(x, y+3, x, y+4, x+1, y+3, color);
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	b29c      	uxth	r4, r3
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	b29e      	uxth	r6, r3
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	88ba      	ldrh	r2, [r7, #4]
 8001cf6:	3203      	adds	r2, #3
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	88fd      	ldrh	r5, [r7, #6]
 8001cfc:	88f8      	ldrh	r0, [r7, #6]
 8001cfe:	8879      	ldrh	r1, [r7, #2]
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4633      	mov	r3, r6
 8001d08:	462a      	mov	r2, r5
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	f7ff fba2 	bl	8001454 <ST7789_DrawFilledTriangle>
	ST7789_DrawFilledTriangle(x+13, y, x+13, y+1, x+15, y, color);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	330d      	adds	r3, #13
 8001d14:	b298      	uxth	r0, r3
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	330d      	adds	r3, #13
 8001d1a:	b29c      	uxth	r4, r3
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29d      	uxth	r5, r3
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	330f      	adds	r3, #15
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	88b9      	ldrh	r1, [r7, #4]
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	9202      	str	r2, [sp, #8]
 8001d2e:	88ba      	ldrh	r2, [r7, #4]
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	462b      	mov	r3, r5
 8001d36:	4622      	mov	r2, r4
 8001d38:	f7ff fb8c 	bl	8001454 <ST7789_DrawFilledTriangle>
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <Error_Handler+0x6>

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6193      	str	r3, [r2, #24]
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_MspInit+0x5c>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_MspInit+0x60>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_MspInit+0x60>)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_SPI_MspInit+0x88>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d12f      	bne.n	8001e30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e00:	23a0      	movs	r3, #160	; 0xa0
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	480b      	ldr	r0, [pc, #44]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001e14:	f000 f9e6 	bl	80021e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e18:	2340      	movs	r3, #64	; 0x40
 8001e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001e2c:	f000 f9da 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013000 	.word	0x40013000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8a:	f000 f8ab 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f001 f950 	bl	8003168 <__errno>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	230c      	movs	r3, #12
 8001ecc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20005000 	.word	0x20005000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	20000090 	.word	0x20000090
 8001efc:	20000100 	.word	0x20000100

08001f00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f32:	f7ff ffe5 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f001 f91d 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3a:	f7ff fc41 	bl	80017c0 <main>
  bx lr
 8001f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f48:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8001f4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f50:	200000fc 	.word	0x200000fc

08001f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_2_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x28>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x28>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 f907 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff feea 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f911 	bl	80021ca <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 f8e7 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_IncTick+0x1c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_IncTick+0x20>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <HAL_IncTick+0x20>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000008 	.word	0x20000008
 8002004:	200000f4 	.word	0x200000f4

08002008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <HAL_GetTick+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	200000f4 	.word	0x200000f4

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff90 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff49 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff5e 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff90 	bl	80020d4 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5f 	bl	8002080 <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffb0 	bl	8002138 <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b08b      	sub	sp, #44	; 0x2c
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f6:	e127      	b.n	8002448 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f8:	2201      	movs	r2, #1
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8116 	bne.w	8002442 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b12      	cmp	r3, #18
 800221c:	d034      	beq.n	8002288 <HAL_GPIO_Init+0xa4>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d80d      	bhi.n	800223e <HAL_GPIO_Init+0x5a>
 8002222:	2b02      	cmp	r3, #2
 8002224:	d02b      	beq.n	800227e <HAL_GPIO_Init+0x9a>
 8002226:	2b02      	cmp	r3, #2
 8002228:	d804      	bhi.n	8002234 <HAL_GPIO_Init+0x50>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d031      	beq.n	8002292 <HAL_GPIO_Init+0xae>
 800222e:	2b01      	cmp	r3, #1
 8002230:	d01c      	beq.n	800226c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002232:	e048      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002234:	2b03      	cmp	r3, #3
 8002236:	d043      	beq.n	80022c0 <HAL_GPIO_Init+0xdc>
 8002238:	2b11      	cmp	r3, #17
 800223a:	d01b      	beq.n	8002274 <HAL_GPIO_Init+0x90>
          break;
 800223c:	e043      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800223e:	4a89      	ldr	r2, [pc, #548]	; (8002464 <HAL_GPIO_Init+0x280>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d026      	beq.n	8002292 <HAL_GPIO_Init+0xae>
 8002244:	4a87      	ldr	r2, [pc, #540]	; (8002464 <HAL_GPIO_Init+0x280>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d806      	bhi.n	8002258 <HAL_GPIO_Init+0x74>
 800224a:	4a87      	ldr	r2, [pc, #540]	; (8002468 <HAL_GPIO_Init+0x284>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d020      	beq.n	8002292 <HAL_GPIO_Init+0xae>
 8002250:	4a86      	ldr	r2, [pc, #536]	; (800246c <HAL_GPIO_Init+0x288>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01d      	beq.n	8002292 <HAL_GPIO_Init+0xae>
          break;
 8002256:	e036      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002258:	4a85      	ldr	r2, [pc, #532]	; (8002470 <HAL_GPIO_Init+0x28c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0xae>
 800225e:	4a85      	ldr	r2, [pc, #532]	; (8002474 <HAL_GPIO_Init+0x290>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d016      	beq.n	8002292 <HAL_GPIO_Init+0xae>
 8002264:	4a84      	ldr	r2, [pc, #528]	; (8002478 <HAL_GPIO_Init+0x294>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0xae>
          break;
 800226a:	e02c      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e028      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	3304      	adds	r3, #4
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e023      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	3308      	adds	r3, #8
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e01e      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	330c      	adds	r3, #12
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e019      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229a:	2304      	movs	r3, #4
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e012      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	611a      	str	r2, [r3, #16]
          break;
 80022b2:	e008      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	615a      	str	r2, [r3, #20]
          break;
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2bff      	cmp	r3, #255	; 0xff
 80022ca:	d801      	bhi.n	80022d0 <HAL_GPIO_Init+0xec>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	e001      	b.n	80022d4 <HAL_GPIO_Init+0xf0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	d802      	bhi.n	80022e2 <HAL_GPIO_Init+0xfe>
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x104>
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	3b08      	subs	r3, #8
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	210f      	movs	r1, #15
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	6a39      	ldr	r1, [r7, #32]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	431a      	orrs	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8096 	beq.w	8002442 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_GPIO_Init+0x298>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	4a58      	ldr	r2, [pc, #352]	; (800247c <HAL_GPIO_Init+0x298>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6193      	str	r3, [r2, #24]
 8002322:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_GPIO_Init+0x298>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800232e:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_GPIO_Init+0x29c>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_GPIO_Init+0x2a0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x19e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_GPIO_Init+0x2a4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x19a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	; (800248c <HAL_GPIO_Init+0x2a8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x196>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_GPIO_Init+0x2ac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x192>
 8002372:	2303      	movs	r3, #3
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x1a0>
 8002376:	2304      	movs	r3, #4
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x1a0>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x1a0>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x1a0>
 8002382:	2300      	movs	r3, #0
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002394:	493a      	ldr	r1, [pc, #232]	; (8002480 <HAL_GPIO_Init+0x29c>)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ae:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4938      	ldr	r1, [pc, #224]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4933      	ldr	r1, [pc, #204]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4929      	ldr	r1, [pc, #164]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	4924      	ldr	r1, [pc, #144]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	491f      	ldr	r1, [pc, #124]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 8002416:	4013      	ands	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	491a      	ldr	r1, [pc, #104]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]
 8002432:	e006      	b.n	8002442 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	43db      	mvns	r3, r3
 800243c:	4915      	ldr	r1, [pc, #84]	; (8002494 <HAL_GPIO_Init+0x2b0>)
 800243e:	4013      	ands	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	f47f aed0 	bne.w	80021f8 <HAL_GPIO_Init+0x14>
  }
}
 8002458:	bf00      	nop
 800245a:	372c      	adds	r7, #44	; 0x2c
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	10210000 	.word	0x10210000
 8002468:	10110000 	.word	0x10110000
 800246c:	10120000 	.word	0x10120000
 8002470:	10310000 	.word	0x10310000
 8002474:	10320000 	.word	0x10320000
 8002478:	10220000 	.word	0x10220000
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000
 8002484:	40010800 	.word	0x40010800
 8002488:	40010c00 	.word	0x40010c00
 800248c:	40011000 	.word	0x40011000
 8002490:	40011400 	.word	0x40011400
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e26c      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e8:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d00c      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d112      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d10b      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x12c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d168      	bne.n	80025f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e246      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x76>
 8002530:	4b80      	ldr	r3, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e02e      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0xbc>
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a67      	ldr	r2, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fd30 	bl	8002008 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fd2c 	bl	8002008 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1fa      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xe4>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fd1c 	bl	8002008 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fd18 	bl	8002008 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1e6      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x10c>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d063      	beq.n	80026ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1ba      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4939      	ldr	r1, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e03a      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff fcd1 	bl	8002008 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fccd 	bl	8002008 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e19b      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4927      	ldr	r1, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fcb0 	bl	8002008 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fcac 	bl	8002008 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e17a      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d03a      	beq.n	800274c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7ff fc90 	bl	8002008 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff fc8c 	bl	8002008 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e15a      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800270a:	2001      	movs	r0, #1
 800270c:	f000 faa8 	bl	8002c60 <RCC_Delay>
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff fc76 	bl	8002008 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271e:	e00f      	b.n	8002740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fc72 	bl	8002008 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d908      	bls.n	8002740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e140      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	42420000 	.word	0x42420000
 800273c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e9      	bne.n	8002720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a6 	beq.w	80028a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b97      	ldr	r3, [pc, #604]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a93      	ldr	r2, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b91      	ldr	r3, [pc, #580]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d118      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a8a      	ldr	r2, [pc, #552]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279e:	f7ff fc33 	bl	8002008 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7ff fc2f 	bl	8002008 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0fd      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x312>
 80027cc:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x334>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	e01c      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x356>
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a6c      	ldr	r2, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e00b      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fbe3 	bl	8002008 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7ff fbdf 	bl	8002008 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0ab      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4b57      	ldr	r3, [pc, #348]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCC_OscConfig+0x37e>
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7ff fbcd 	bl	8002008 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff fbc9 	bl	8002008 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e095      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b48      	ldr	r3, [pc, #288]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8081 	beq.w	80029b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d061      	beq.n	8002980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d146      	bne.n	8002952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7ff fb9d 	bl	8002008 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7ff fb99 	bl	8002008 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e067      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d108      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	492d      	ldr	r1, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a19      	ldr	r1, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	430b      	orrs	r3, r1
 800291e:	4927      	ldr	r1, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7ff fb6d 	bl	8002008 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff fb69 	bl	8002008 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e037      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x46a>
 8002950:	e02f      	b.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fb56 	bl	8002008 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff fb52 	bl	8002008 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e020      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x498>
 800297e:	e018      	b.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e013      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420060 	.word	0x42420060

080029c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7ff faa6 	bl	8002008 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7ff faa2 	bl	8002008 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 0207 	bic.w	r2, r3, #7
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1cc>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa04 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	0800354c 	.word	0x0800354c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b490      	push	{r4, r7}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ba4:	1d3c      	adds	r4, r7, #4
 8002ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bda:	e02d      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bde:	623b      	str	r3, [r7, #32]
      break;
 8002be0:	e02d      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bee:	4413      	add	r3, r2
 8002bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c5b      	lsrs	r3, r3, #17
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0e:	4413      	add	r3, r2
 8002c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c1a:	fb02 f203 	mul.w	r2, r2, r3
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e004      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	623b      	str	r3, [r7, #32]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c3a:	623b      	str	r3, [r7, #32]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc90      	pop	{r4, r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	08003538 	.word	0x08003538
 8002c50:	08003548 	.word	0x08003548
 8002c54:	40021000 	.word	0x40021000
 8002c58:	007a1200 	.word	0x007a1200
 8002c5c:	003d0900 	.word	0x003d0900

08002c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <RCC_Delay+0x34>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <RCC_Delay+0x38>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a5b      	lsrs	r3, r3, #9
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c7c:	bf00      	nop
  }
  while (Delay --);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <RCC_Delay+0x1c>
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e076      	b.n	8002d9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cbe:	d009      	beq.n	8002cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
 8002cc6:	e005      	b.n	8002cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff f85e 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	0c1a      	lsrs	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 0204 	and.w	r2, r2, #4
 8002d7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_SPI_Transmit+0x22>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e126      	b.n	8003014 <HAL_SPI_Transmit+0x270>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dce:	f7ff f91b 	bl	8002008 <HAL_GetTick>
 8002dd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
 8002de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002de8:	e10b      	b.n	8003002 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_Transmit+0x52>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dfa:	e102      	b.n	8003002 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e42:	d10f      	bne.n	8002e64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d007      	beq.n	8002e82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8a:	d14b      	bne.n	8002f24 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0xf6>
 8002e94:	8afb      	ldrh	r3, [r7, #22]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d13e      	bne.n	8002f18 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ebe:	e02b      	b.n	8002f18 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d112      	bne.n	8002ef4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ef2:	e011      	b.n	8002f18 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef4:	f7ff f888 	bl	8002008 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d803      	bhi.n	8002f0c <HAL_SPI_Transmit+0x168>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d102      	bne.n	8002f12 <HAL_SPI_Transmit+0x16e>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f16:	e074      	b.n	8003002 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ce      	bne.n	8002ec0 <HAL_SPI_Transmit+0x11c>
 8002f22:	e04c      	b.n	8002fbe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_Transmit+0x18e>
 8002f2c:	8afb      	ldrh	r3, [r7, #22]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d140      	bne.n	8002fb4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f58:	e02c      	b.n	8002fb4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d113      	bne.n	8002f90 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f8e:	e011      	b.n	8002fb4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f90:	f7ff f83a 	bl	8002008 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d803      	bhi.n	8002fa8 <HAL_SPI_Transmit+0x204>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d102      	bne.n	8002fae <HAL_SPI_Transmit+0x20a>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fb2:	e026      	b.n	8003002 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cd      	bne.n	8002f5a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8b2 	bl	800312c <SPI_EndRxTxTransaction>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e000      	b.n	8003002 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003012:	7ffb      	ldrb	r3, [r7, #31]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800302c:	f7fe ffec 	bl	8002008 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800303c:	f7fe ffe4 	bl	8002008 <HAL_GetTick>
 8003040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	015b      	lsls	r3, r3, #5
 8003048:	0d1b      	lsrs	r3, r3, #20
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	e054      	b.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d050      	beq.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800305c:	f7fe ffd4 	bl	8002008 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d111      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003094:	d004      	beq.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d107      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d10f      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e017      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d19b      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2200      	movs	r2, #0
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7ff ff6a 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e000      	b.n	8003160 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2000000c 	.word	0x2000000c

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	2500      	movs	r5, #0
 8003178:	4e0c      	ldr	r6, [pc, #48]	; (80031ac <__libc_init_array+0x38>)
 800317a:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317c:	1ba4      	subs	r4, r4, r6
 800317e:	10a4      	asrs	r4, r4, #2
 8003180:	42a5      	cmp	r5, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	f000 f9cc 	bl	8003520 <_init>
 8003188:	2500      	movs	r5, #0
 800318a:	4e0a      	ldr	r6, [pc, #40]	; (80031b4 <__libc_init_array+0x40>)
 800318c:	4c0a      	ldr	r4, [pc, #40]	; (80031b8 <__libc_init_array+0x44>)
 800318e:	1ba4      	subs	r4, r4, r6
 8003190:	10a4      	asrs	r4, r4, #2
 8003192:	42a5      	cmp	r5, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800319c:	4798      	blx	r3
 800319e:	3501      	adds	r5, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031a6:	4798      	blx	r3
 80031a8:	3501      	adds	r5, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	08003564 	.word	0x08003564
 80031b0:	08003564 	.word	0x08003564
 80031b4:	08003564 	.word	0x08003564
 80031b8:	08003568 	.word	0x08003568

080031bc <memset>:
 80031bc:	4603      	mov	r3, r0
 80031be:	4402      	add	r2, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <rand>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <rand+0x50>)
 80031d0:	681c      	ldr	r4, [r3, #0]
 80031d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d4:	b97b      	cbnz	r3, 80031f6 <rand+0x2a>
 80031d6:	2018      	movs	r0, #24
 80031d8:	f000 f82c 	bl	8003234 <malloc>
 80031dc:	4a10      	ldr	r2, [pc, #64]	; (8003220 <rand+0x54>)
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <rand+0x58>)
 80031e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80031e2:	e9c0 2300 	strd	r2, r3, [r0]
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <rand+0x5c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	6083      	str	r3, [r0, #8]
 80031ec:	230b      	movs	r3, #11
 80031ee:	8183      	strh	r3, [r0, #12]
 80031f0:	2300      	movs	r3, #0
 80031f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80031f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031f8:	480c      	ldr	r0, [pc, #48]	; (800322c <rand+0x60>)
 80031fa:	690a      	ldr	r2, [r1, #16]
 80031fc:	694b      	ldr	r3, [r1, #20]
 80031fe:	4350      	muls	r0, r2
 8003200:	4c0b      	ldr	r4, [pc, #44]	; (8003230 <rand+0x64>)
 8003202:	fb04 0003 	mla	r0, r4, r3, r0
 8003206:	fba2 2304 	umull	r2, r3, r2, r4
 800320a:	4403      	add	r3, r0
 800320c:	1c54      	adds	r4, r2, #1
 800320e:	f143 0500 	adc.w	r5, r3, #0
 8003212:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003216:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	2000000c 	.word	0x2000000c
 8003220:	abcd330e 	.word	0xabcd330e
 8003224:	e66d1234 	.word	0xe66d1234
 8003228:	0005deec 	.word	0x0005deec
 800322c:	5851f42d 	.word	0x5851f42d
 8003230:	4c957f2d 	.word	0x4c957f2d

08003234 <malloc>:
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <malloc+0xc>)
 8003236:	4601      	mov	r1, r0
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	f000 b803 	b.w	8003244 <_malloc_r>
 800323e:	bf00      	nop
 8003240:	2000000c 	.word	0x2000000c

08003244 <_malloc_r>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	1ccd      	adds	r5, r1, #3
 8003248:	f025 0503 	bic.w	r5, r5, #3
 800324c:	3508      	adds	r5, #8
 800324e:	2d0c      	cmp	r5, #12
 8003250:	bf38      	it	cc
 8003252:	250c      	movcc	r5, #12
 8003254:	2d00      	cmp	r5, #0
 8003256:	4606      	mov	r6, r0
 8003258:	db01      	blt.n	800325e <_malloc_r+0x1a>
 800325a:	42a9      	cmp	r1, r5
 800325c:	d903      	bls.n	8003266 <_malloc_r+0x22>
 800325e:	230c      	movs	r3, #12
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	f000 f857 	bl	8003318 <__malloc_lock>
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <_malloc_r+0xac>)
 800326c:	6814      	ldr	r4, [r2, #0]
 800326e:	4621      	mov	r1, r4
 8003270:	b991      	cbnz	r1, 8003298 <_malloc_r+0x54>
 8003272:	4c20      	ldr	r4, [pc, #128]	; (80032f4 <_malloc_r+0xb0>)
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	b91b      	cbnz	r3, 8003280 <_malloc_r+0x3c>
 8003278:	4630      	mov	r0, r6
 800327a:	f000 f83d 	bl	80032f8 <_sbrk_r>
 800327e:	6020      	str	r0, [r4, #0]
 8003280:	4629      	mov	r1, r5
 8003282:	4630      	mov	r0, r6
 8003284:	f000 f838 	bl	80032f8 <_sbrk_r>
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d124      	bne.n	80032d6 <_malloc_r+0x92>
 800328c:	230c      	movs	r3, #12
 800328e:	4630      	mov	r0, r6
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	f000 f842 	bl	800331a <__malloc_unlock>
 8003296:	e7e4      	b.n	8003262 <_malloc_r+0x1e>
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	1b5b      	subs	r3, r3, r5
 800329c:	d418      	bmi.n	80032d0 <_malloc_r+0x8c>
 800329e:	2b0b      	cmp	r3, #11
 80032a0:	d90f      	bls.n	80032c2 <_malloc_r+0x7e>
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	18cc      	adds	r4, r1, r3
 80032a6:	50cd      	str	r5, [r1, r3]
 80032a8:	4630      	mov	r0, r6
 80032aa:	f000 f836 	bl	800331a <__malloc_unlock>
 80032ae:	f104 000b 	add.w	r0, r4, #11
 80032b2:	1d23      	adds	r3, r4, #4
 80032b4:	f020 0007 	bic.w	r0, r0, #7
 80032b8:	1ac3      	subs	r3, r0, r3
 80032ba:	d0d3      	beq.n	8003264 <_malloc_r+0x20>
 80032bc:	425a      	negs	r2, r3
 80032be:	50e2      	str	r2, [r4, r3]
 80032c0:	e7d0      	b.n	8003264 <_malloc_r+0x20>
 80032c2:	684b      	ldr	r3, [r1, #4]
 80032c4:	428c      	cmp	r4, r1
 80032c6:	bf16      	itet	ne
 80032c8:	6063      	strne	r3, [r4, #4]
 80032ca:	6013      	streq	r3, [r2, #0]
 80032cc:	460c      	movne	r4, r1
 80032ce:	e7eb      	b.n	80032a8 <_malloc_r+0x64>
 80032d0:	460c      	mov	r4, r1
 80032d2:	6849      	ldr	r1, [r1, #4]
 80032d4:	e7cc      	b.n	8003270 <_malloc_r+0x2c>
 80032d6:	1cc4      	adds	r4, r0, #3
 80032d8:	f024 0403 	bic.w	r4, r4, #3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d005      	beq.n	80032ec <_malloc_r+0xa8>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	4630      	mov	r0, r6
 80032e4:	f000 f808 	bl	80032f8 <_sbrk_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d0cf      	beq.n	800328c <_malloc_r+0x48>
 80032ec:	6025      	str	r5, [r4, #0]
 80032ee:	e7db      	b.n	80032a8 <_malloc_r+0x64>
 80032f0:	20000094 	.word	0x20000094
 80032f4:	20000098 	.word	0x20000098

080032f8 <_sbrk_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	2300      	movs	r3, #0
 80032fc:	4c05      	ldr	r4, [pc, #20]	; (8003314 <_sbrk_r+0x1c>)
 80032fe:	4605      	mov	r5, r0
 8003300:	4608      	mov	r0, r1
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	f7fe fdc6 	bl	8001e94 <_sbrk>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_sbrk_r+0x1a>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	b103      	cbz	r3, 8003312 <_sbrk_r+0x1a>
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	200000f8 	.word	0x200000f8

08003318 <__malloc_lock>:
 8003318:	4770      	bx	lr

0800331a <__malloc_unlock>:
 800331a:	4770      	bx	lr

0800331c <sqrt>:
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	b08b      	sub	sp, #44	; 0x2c
 8003322:	4604      	mov	r4, r0
 8003324:	460d      	mov	r5, r1
 8003326:	f000 f84d 	bl	80033c4 <__ieee754_sqrt>
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <sqrt+0xa0>)
 800332c:	4680      	mov	r8, r0
 800332e:	f993 a000 	ldrsb.w	sl, [r3]
 8003332:	4689      	mov	r9, r1
 8003334:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003338:	d02b      	beq.n	8003392 <sqrt+0x76>
 800333a:	4622      	mov	r2, r4
 800333c:	462b      	mov	r3, r5
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd fb5b 	bl	80009fc <__aeabi_dcmpun>
 8003346:	4683      	mov	fp, r0
 8003348:	bb18      	cbnz	r0, 8003392 <sqrt+0x76>
 800334a:	2600      	movs	r6, #0
 800334c:	2700      	movs	r7, #0
 800334e:	4632      	mov	r2, r6
 8003350:	463b      	mov	r3, r7
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f7fd fb29 	bl	80009ac <__aeabi_dcmplt>
 800335a:	b1d0      	cbz	r0, 8003392 <sqrt+0x76>
 800335c:	2301      	movs	r3, #1
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <sqrt+0xa4>)
 8003362:	f8cd b020 	str.w	fp, [sp, #32]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800336c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003370:	f1ba 0f00 	cmp.w	sl, #0
 8003374:	d112      	bne.n	800339c <sqrt+0x80>
 8003376:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800337a:	4668      	mov	r0, sp
 800337c:	f000 f8ce 	bl	800351c <matherr>
 8003380:	b1b8      	cbz	r0, 80033b2 <sqrt+0x96>
 8003382:	9b08      	ldr	r3, [sp, #32]
 8003384:	b11b      	cbz	r3, 800338e <sqrt+0x72>
 8003386:	f7ff feef 	bl	8003168 <__errno>
 800338a:	9b08      	ldr	r3, [sp, #32]
 800338c:	6003      	str	r3, [r0, #0]
 800338e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003392:	4640      	mov	r0, r8
 8003394:	4649      	mov	r1, r9
 8003396:	b00b      	add	sp, #44	; 0x2c
 8003398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339c:	4632      	mov	r2, r6
 800339e:	463b      	mov	r3, r7
 80033a0:	4630      	mov	r0, r6
 80033a2:	4639      	mov	r1, r7
 80033a4:	f7fd f9ba 	bl	800071c <__aeabi_ddiv>
 80033a8:	f1ba 0f02 	cmp.w	sl, #2
 80033ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80033b0:	d1e3      	bne.n	800337a <sqrt+0x5e>
 80033b2:	f7ff fed9 	bl	8003168 <__errno>
 80033b6:	2321      	movs	r3, #33	; 0x21
 80033b8:	6003      	str	r3, [r0, #0]
 80033ba:	e7e2      	b.n	8003382 <sqrt+0x66>
 80033bc:	20000070 	.word	0x20000070
 80033c0:	0800355c 	.word	0x0800355c

080033c4 <__ieee754_sqrt>:
 80033c4:	4b54      	ldr	r3, [pc, #336]	; (8003518 <__ieee754_sqrt+0x154>)
 80033c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	438b      	bics	r3, r1
 80033cc:	4606      	mov	r6, r0
 80033ce:	460d      	mov	r5, r1
 80033d0:	460a      	mov	r2, r1
 80033d2:	460c      	mov	r4, r1
 80033d4:	d10f      	bne.n	80033f6 <__ieee754_sqrt+0x32>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	f7fd f875 	bl	80004c8 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4630      	mov	r0, r6
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7fc feb9 	bl	800015c <__adddf3>
 80033ea:	4606      	mov	r6, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	4630      	mov	r0, r6
 80033f0:	4629      	mov	r1, r5
 80033f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f6:	2900      	cmp	r1, #0
 80033f8:	4607      	mov	r7, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	dc0e      	bgt.n	800341c <__ieee754_sqrt+0x58>
 80033fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003402:	ea5c 0707 	orrs.w	r7, ip, r7
 8003406:	d0f2      	beq.n	80033ee <__ieee754_sqrt+0x2a>
 8003408:	b141      	cbz	r1, 800341c <__ieee754_sqrt+0x58>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	f7fc fea3 	bl	8000158 <__aeabi_dsub>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	f7fd f981 	bl	800071c <__aeabi_ddiv>
 800341a:	e7e6      	b.n	80033ea <__ieee754_sqrt+0x26>
 800341c:	1512      	asrs	r2, r2, #20
 800341e:	d074      	beq.n	800350a <__ieee754_sqrt+0x146>
 8003420:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003424:	07d5      	lsls	r5, r2, #31
 8003426:	f04f 0500 	mov.w	r5, #0
 800342a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800342e:	bf48      	it	mi
 8003430:	0fd9      	lsrmi	r1, r3, #31
 8003432:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003436:	bf44      	itt	mi
 8003438:	005b      	lslmi	r3, r3, #1
 800343a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800343e:	1051      	asrs	r1, r2, #1
 8003440:	0fda      	lsrs	r2, r3, #31
 8003442:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003446:	4628      	mov	r0, r5
 8003448:	2216      	movs	r2, #22
 800344a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	1987      	adds	r7, r0, r6
 8003452:	42a7      	cmp	r7, r4
 8003454:	bfde      	ittt	le
 8003456:	19b8      	addle	r0, r7, r6
 8003458:	1be4      	suble	r4, r4, r7
 800345a:	19ad      	addle	r5, r5, r6
 800345c:	0fdf      	lsrs	r7, r3, #31
 800345e:	3a01      	subs	r2, #1
 8003460:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8003464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800346c:	d1f0      	bne.n	8003450 <__ieee754_sqrt+0x8c>
 800346e:	f04f 0c20 	mov.w	ip, #32
 8003472:	4696      	mov	lr, r2
 8003474:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003478:	4284      	cmp	r4, r0
 800347a:	eb06 070e 	add.w	r7, r6, lr
 800347e:	dc02      	bgt.n	8003486 <__ieee754_sqrt+0xc2>
 8003480:	d112      	bne.n	80034a8 <__ieee754_sqrt+0xe4>
 8003482:	429f      	cmp	r7, r3
 8003484:	d810      	bhi.n	80034a8 <__ieee754_sqrt+0xe4>
 8003486:	2f00      	cmp	r7, #0
 8003488:	eb07 0e06 	add.w	lr, r7, r6
 800348c:	da42      	bge.n	8003514 <__ieee754_sqrt+0x150>
 800348e:	f1be 0f00 	cmp.w	lr, #0
 8003492:	db3f      	blt.n	8003514 <__ieee754_sqrt+0x150>
 8003494:	f100 0801 	add.w	r8, r0, #1
 8003498:	1a24      	subs	r4, r4, r0
 800349a:	4640      	mov	r0, r8
 800349c:	429f      	cmp	r7, r3
 800349e:	bf88      	it	hi
 80034a0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80034a4:	1bdb      	subs	r3, r3, r7
 80034a6:	4432      	add	r2, r6
 80034a8:	0064      	lsls	r4, r4, #1
 80034aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80034ae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80034b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80034b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80034ba:	d1dd      	bne.n	8003478 <__ieee754_sqrt+0xb4>
 80034bc:	4323      	orrs	r3, r4
 80034be:	d006      	beq.n	80034ce <__ieee754_sqrt+0x10a>
 80034c0:	1c54      	adds	r4, r2, #1
 80034c2:	bf0b      	itete	eq
 80034c4:	4662      	moveq	r2, ip
 80034c6:	3201      	addne	r2, #1
 80034c8:	3501      	addeq	r5, #1
 80034ca:	f022 0201 	bicne.w	r2, r2, #1
 80034ce:	106b      	asrs	r3, r5, #1
 80034d0:	0852      	lsrs	r2, r2, #1
 80034d2:	07e8      	lsls	r0, r5, #31
 80034d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80034d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80034dc:	bf48      	it	mi
 80034de:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80034e2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80034e6:	4616      	mov	r6, r2
 80034e8:	e781      	b.n	80033ee <__ieee754_sqrt+0x2a>
 80034ea:	0adc      	lsrs	r4, r3, #11
 80034ec:	3915      	subs	r1, #21
 80034ee:	055b      	lsls	r3, r3, #21
 80034f0:	2c00      	cmp	r4, #0
 80034f2:	d0fa      	beq.n	80034ea <__ieee754_sqrt+0x126>
 80034f4:	02e6      	lsls	r6, r4, #11
 80034f6:	d50a      	bpl.n	800350e <__ieee754_sqrt+0x14a>
 80034f8:	f1c2 0020 	rsb	r0, r2, #32
 80034fc:	fa23 f000 	lsr.w	r0, r3, r0
 8003500:	1e55      	subs	r5, r2, #1
 8003502:	4093      	lsls	r3, r2
 8003504:	4304      	orrs	r4, r0
 8003506:	1b4a      	subs	r2, r1, r5
 8003508:	e78a      	b.n	8003420 <__ieee754_sqrt+0x5c>
 800350a:	4611      	mov	r1, r2
 800350c:	e7f0      	b.n	80034f0 <__ieee754_sqrt+0x12c>
 800350e:	0064      	lsls	r4, r4, #1
 8003510:	3201      	adds	r2, #1
 8003512:	e7ef      	b.n	80034f4 <__ieee754_sqrt+0x130>
 8003514:	4680      	mov	r8, r0
 8003516:	e7bf      	b.n	8003498 <__ieee754_sqrt+0xd4>
 8003518:	7ff00000 	.word	0x7ff00000

0800351c <matherr>:
 800351c:	2000      	movs	r0, #0
 800351e:	4770      	bx	lr

08003520 <_init>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr

0800352c <_fini>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr
